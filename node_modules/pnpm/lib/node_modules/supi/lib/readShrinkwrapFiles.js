"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const pnpm_shrinkwrap_1 = require("pnpm-shrinkwrap");
const logger_1 = require("@pnpm/logger");
const R = require("ramda");
const isCI = require("is-ci");
function getContext(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        // ignore `shrinkwrap.yaml` on CI servers
        // a latest pnpm should not break all the builds
        const shrOpts = { ignoreIncompatible: opts.force || isCI };
        const files = yield Promise.all([
            opts.shrinkwrap && pnpm_shrinkwrap_1.readWanted(opts.prefix, shrOpts)
                || (yield pnpm_shrinkwrap_1.existsWanted(opts.prefix)) &&
                    logger_1.default.warn('A shrinkwrap.yaml file exists. The current configuration prohibits to read or write a shrinkwrap file'),
            pnpm_shrinkwrap_1.readCurrent(opts.prefix, shrOpts),
        ]);
        const currentShrinkwrap = files[1] || pnpm_shrinkwrap_1.create(opts.registry);
        return {
            wantedShrinkwrap: files[0] || !opts.shrinkwrap && currentShrinkwrap && R.clone(currentShrinkwrap) || pnpm_shrinkwrap_1.create(opts.registry),
            currentShrinkwrap,
            existsWantedShrinkwrap: !!files[0],
            existsCurrentShrinkwrap: !!files[1],
        };
    });
}
exports.default = getContext;
//# sourceMappingURL=readShrinkwrapFiles.js.map