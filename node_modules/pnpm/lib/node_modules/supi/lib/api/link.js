"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const loadJsonFile = require("load-json-file");
const symlinkDir = require("symlink-dir");
const logger_1 = require("@pnpm/logger");
const install_1 = require("./install");
const pathAbsolute = require("path-absolute");
const normalize = require("normalize-path");
const R = require("ramda");
const linkBins_1 = require("../link/linkBins");
const extendInstallOptions_1 = require("./extendInstallOptions");
const readShrinkwrapFiles_1 = require("../readShrinkwrapFiles");
const removeOrphanPkgs_1 = require("./removeOrphanPkgs");
const pLimit = require("p-limit");
const pnpm_shrinkwrap_1 = require("pnpm-shrinkwrap");
const safeReadPkg_1 = require("../fs/safeReadPkg");
const getSpecFromPackageJson_1 = require("../getSpecFromPackageJson");
const modulesController_1 = require("../fs/modulesController");
const linkLogger = logger_1.default('link');
const installLimit = pLimit(4);
function link(linkFromPkgs, destModules, maybeOpts) {
    return __awaiter(this, void 0, void 0, function* () {
        const reporter = maybeOpts && maybeOpts.reporter;
        if (reporter) {
            logger_1.streamParser.on('data', reporter);
        }
        const opts = yield extendInstallOptions_1.default(maybeOpts);
        if (!maybeOpts || !maybeOpts.skipInstall) {
            yield Promise.all(linkFromPkgs.map(prefix => installLimit(() => install_1.install(Object.assign({}, opts, { prefix, bin: path.join(prefix, 'node_modules', '.bin'), global: false })))));
        }
        const shrFiles = yield readShrinkwrapFiles_1.default({
            prefix: opts.prefix,
            shrinkwrap: opts.shrinkwrap,
            force: opts.force,
            registry: opts.registry,
        });
        const oldShrinkwrap = R.clone(shrFiles.currentShrinkwrap);
        const pkg = (yield safeReadPkg_1.default(path.join(opts.prefix, 'package.json'))) || undefined;
        const linkedPkgs = [];
        for (const linkFrom of linkFromPkgs) {
            const linkedPkg = yield loadJsonFile(path.join(linkFrom, 'package.json'));
            const packagePath = normalize(path.relative(opts.prefix, linkFrom));
            const addLinkOpts = {
                packagePath,
                linkedPkgName: linkedPkg.name,
                pkg,
            };
            addLinkToShrinkwrap(shrFiles.currentShrinkwrap, addLinkOpts);
            addLinkToShrinkwrap(shrFiles.wantedShrinkwrap, addLinkOpts);
            linkedPkgs.push({ path: linkFrom, pkg: linkedPkg });
        }
        const updatedCurrentShrinkwrap = pnpm_shrinkwrap_1.prune(shrFiles.currentShrinkwrap);
        const updatedWantedShrinkwrap = pnpm_shrinkwrap_1.prune(shrFiles.wantedShrinkwrap);
        const modulesInfo = yield modulesController_1.read(destModules);
        yield removeOrphanPkgs_1.default({
            oldShrinkwrap,
            newShrinkwrap: updatedCurrentShrinkwrap,
            bin: opts.bin,
            prefix: opts.prefix,
            shamefullyFlatten: opts.shamefullyFlatten,
            storeController: opts.storeController,
            hoistedAliases: modulesInfo && modulesInfo.hoistedAliases || {},
        });
        // Linking should happen after removing orphans
        // Otherwise would've been removed
        for (const linkedPkg of linkedPkgs) {
            yield linkToModules(linkedPkg.pkg.name, linkedPkg.path, destModules);
            const linkToBin = maybeOpts && maybeOpts.linkToBin || path.join(destModules, '.bin');
            yield linkBins_1.linkPkgBins(linkedPkg.path, linkToBin);
        }
        if (opts.shrinkwrap) {
            yield pnpm_shrinkwrap_1.write(opts.prefix, updatedWantedShrinkwrap, updatedCurrentShrinkwrap);
        }
        else {
            yield pnpm_shrinkwrap_1.writeCurrentOnly(opts.prefix, updatedCurrentShrinkwrap);
        }
        if (reporter) {
            logger_1.streamParser.removeListener('data', reporter);
        }
    });
}
exports.default = link;
function addLinkToShrinkwrap(shr, opts) {
    const legacyId = `file:${opts.packagePath}`;
    const id = `link:${opts.packagePath}`;
    if (shr.devDependencies && shr.devDependencies[opts.linkedPkgName]) {
        if (shr.devDependencies[opts.linkedPkgName] !== legacyId) {
            shr.devDependencies[opts.linkedPkgName] = id;
        }
    }
    else if (shr.optionalDependencies && shr.optionalDependencies[opts.linkedPkgName]) {
        if (shr.optionalDependencies[opts.linkedPkgName] !== legacyId) {
            shr.optionalDependencies[opts.linkedPkgName] = id;
        }
    }
    else if (!shr.dependencies || shr.dependencies[opts.linkedPkgName] !== legacyId) {
        shr.dependencies = shr.dependencies || {};
        shr.dependencies[opts.linkedPkgName] = id;
    }
    // package.json might not be available when linking to global
    if (!opts.pkg)
        return;
    const availableSpec = getSpecFromPackageJson_1.default(opts.pkg, opts.linkedPkgName);
    if (availableSpec) {
        shr.specifiers[opts.linkedPkgName] = availableSpec;
    }
    else {
        delete shr.specifiers[opts.linkedPkgName];
    }
}
function linkToModules(pkgName, linkFrom, modules) {
    return __awaiter(this, void 0, void 0, function* () {
        const dest = path.join(modules, pkgName);
        linkLogger.info(`${dest} -> ${linkFrom}`);
        yield symlinkDir(linkFrom, dest);
    });
}
function linkFromGlobal(pkgNames, linkTo, maybeOpts) {
    return __awaiter(this, void 0, void 0, function* () {
        const reporter = maybeOpts && maybeOpts.reporter;
        if (reporter) {
            logger_1.streamParser.on('data', reporter);
        }
        const opts = yield extendInstallOptions_1.default(maybeOpts);
        const globalPkgPath = pathAbsolute(maybeOpts.globalPrefix);
        const linkFromPkgs = pkgNames.map(pkgName => path.join(globalPkgPath, 'node_modules', pkgName));
        yield link(linkFromPkgs, path.join(linkTo, 'node_modules'), opts);
        if (reporter) {
            logger_1.streamParser.removeListener('data', reporter);
        }
    });
}
exports.linkFromGlobal = linkFromGlobal;
function linkToGlobal(linkFrom, maybeOpts) {
    return __awaiter(this, void 0, void 0, function* () {
        const reporter = maybeOpts && maybeOpts.reporter;
        if (reporter) {
            logger_1.streamParser.on('data', reporter);
        }
        const opts = yield extendInstallOptions_1.default(maybeOpts);
        const globalPkgPath = pathAbsolute(maybeOpts.globalPrefix);
        yield link([linkFrom], path.join(globalPkgPath, 'node_modules'), Object.assign({}, opts, { linkToBin: maybeOpts.globalBin, prefix: maybeOpts.globalPrefix }));
        if (reporter) {
            logger_1.streamParser.removeListener('data', reporter);
        }
    });
}
exports.linkToGlobal = linkToGlobal;
//# sourceMappingURL=link.js.map